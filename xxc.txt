<!DOCTYPE html>
<html>
<body>

        <input type="text" id="innovoicename">
         <input type="text" id="ordernumber">
        <input type="text" id="innovicenumber">
  <input type="text" id="innovicestartdate">
  <input type="text" id="innoviceduedate">
<input type="text" id="innvoiceamount">
<canvas id="the-canvas" ></canvas>


<div>
    <div>
        <label for="filePicker">Choose or drag a file:</label><br>
        <input type="file" id="filePicker">
    </div>
    <br>
    <div>
        <textarea style="display:none;"id="base64textarea" placeholder="Base64 will appear here" cols="50" rows="15"></textarea>
    </div>
</div>


<div id="text-overlay" style="display:none;"></div>
<canvas id="the-canvas" style="display:none;"></canvas>


#the-canvas {
  border:1px solid black;
}


<script>
<script src="//mozilla.github.io/pdf.js/build/pdf.js"></script>

// atob() is used to convert base64 encoded PDF to binary-like data.
// (See also https://developer.mozilla.org/en-US/docs/Web/API/WindowBase64/
// Base64_encoding_and_decoding.)

var handleFileSelect = function(evt) {
    var files = evt.target.files;
    var file = files[0];

    if (files && file) {
        var reader = new FileReader();

        reader.onload = function(readerEvt) {
            var binaryString = readerEvt.target.result;
            document.getElementById("base64textarea").value = btoa(binaryString);
            //console.log(btoa(binaryString));

        //////////////////////


console.log(document.getElementById("base64textarea").value);
        ////////////////////////



var pdfData = atob(btoa(binaryString));

// Disable workers to avoid yet another cross-origin issue (workers need
// the URL of the script to be loaded, and dynamically loading a cross-origin
// script does not work).
// PDFJS.disableWorker = true;

// The workerSrc property shall be specified.
PDFJS.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.js';

// Using DocumentInitParameters object to load binary data.
var loadingTask = PDFJS.getDocument({data: pdfData});
loadingTask.promise.then(function(pdf) {
  console.log('PDF loaded');

  // Fetch the first page
  var pageNumber = 1;
  pdf.getPage(pageNumber).then(function(page) {
    console.log('Page loaded');

    var scale = 1.5;
    var viewport = page.getViewport(scale);

    // Prepare canvas using PDF page dimensions
    var canvas = document.getElementById('the-canvas');
    var context = canvas.getContext('2d');
    console.log("context");
    console.log(context);
    canvas.height = viewport.height;
    canvas.width = viewport.width;

    // Render PDF page into canvas context
    var renderContext = {
      canvasContext: context,
      viewport: viewport
    };
    var renderTask = page.render(renderContext);
    renderTask.then(function () {
      console.log('Page rendered');
    });






    var ctx = document.createElement('canvas').getContext('2d', { alpha: false });


    var pageContainer = document.getElementById('text-overlay');
    pageContainer.classList.add('page-container');
    pageContainer.style.width = viewport.width + 'px';
    pageContainer.style.height = viewport.height + 'px';

    page.getTextContent({ normalizeWhitespace: true }).then(function (textContent) {

      textContent.items.forEach(function (textItem) {
        var tx = PDFJS.Util.transform(
          PDFJS.Util.transform(viewport.transform, textItem.transform),
          [1, 0, 0, -1, 0, 0]
        );

        var style = textContent.styles[textItem.fontName];

        // adjust for font ascent/descent
        var fontSize = Math.sqrt((tx[2] * tx[2]) + (tx[3] * tx[3]));

        if (style.ascent) {
          tx[5] -= fontSize * style.ascent;
        } else if (style.descent) {
          tx[5] -= fontSize * (1 + style.descent);
        } else {
          tx[5] -= fontSize / 2;
        }

        // adjust for rendered width
        if (textItem.width > 0) {
          ctx.font = tx[0] + 'px ' + style.fontFamily;

          var width = ctx.measureText(textItem.str).width;

          if (width > 0) {
            //tx[0] *= (textItem.width * viewport.scale) / width;
            tx[0] = (textItem.width * viewport.scale) / width;
          }
        }

        var item = document.createElement('span');
        item.textContent = textItem.str === 'Adobe Acrobat PDF Files' ? 'Burp!' : textItem.str;
        item.style.fontFamily = style.fontFamily;
        item.style.fontSize = fontSize + 'px';
        item.style.transform = 'scaleX(' + tx[0] + ')';
        item.style.left = tx[4] + 'px';
        item.style.top = tx[5] + 'px';

        pageContainer.appendChild(item);
      });
    });
    var pageContainer = document.getElementById('text-overlay');
    pageContainer.classList.add('page-container');
    pageContainer.style.width = viewport.width + 'px';
    pageContainer.style.height = viewport.height + 'px';

    page.getTextContent({ normalizeWhitespace: true }).then(function (textContent) {
      var fruits = [];
      textContent.items.forEach(function (textItem) {

        var tx = PDFJS.Util.transform(
          PDFJS.Util.transform(viewport.transform, textItem.transform),
          [1, 0, 0, -1, 0, 0]
        );

        var style = textContent.styles[textItem.fontName];

        // adjust for font ascent/descent
        var fontSize = Math.sqrt((tx[2] * tx[2]) + (tx[3] * tx[3]));

        if (style.ascent) {
          tx[5] -= fontSize * style.ascent;
        } else if (style.descent) {
          tx[5] -= fontSize * (1 + style.descent);
        } else {
          tx[5] -= fontSize / 2;
        }

        // adjust for rendered width
        if (textItem.width > 0) {
          ctx.font = tx[0] + 'px ' + style.fontFamily;

          var width = ctx.measureText(textItem.str).width;

          if (width > 0) {
            //tx[0] *= (textItem.width * viewport.scale) / width;
            tx[0] = (textItem.width * viewport.scale) / width;
          }
        }

        var item = document.createElement('span');
        item.textContent = textItem.str === 'Hello, world!' ? 'Burp!' : textItem.str;

         fruits.push(item.textContent);
         console.log("item.textContent");
        console.log(item.textContent);
        item.style.fontFamily = style.fontFamily;
        item.style.fontSize = fontSize + 'px';
        item.style.transform = 'scaleX(' + tx[0] + ')';
        item.style.left = tx[4] + 'px';
        item.style.top = tx[5] + 'px';

        pageContainer.appendChild(item);

      });


    console.log("fruits");
console.log(fruits);
   document.getElementById("innovoicename").value=fruits[8];
document.getElementById("innovicenumber").value=fruits[14];
document.getElementById("ordernumber").value=fruits[16];
document.getElementById("innovicestartdate").value=fruits[18];
document.getElementById("innoviceduedate").value=fruits[20];
document.getElementById("innvoiceamount").value=fruits[22];

    });








  });
}, function (reason) {
  // PDF loading error
  console.error(reason);
});

        };

        reader.readAsBinaryString(file);
    }

   //


};


if (window.File && window.FileReader && window.FileList && window.Blob) {
    document.getElementById('filePicker').addEventListener('change', handleFileSelect, false);
} else {
    alert('The File APIs are not fully supported in this browser.');
}

</script>
</body>
</html>
